"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.delay = delay;
var _regeneratorRuntime2 = _interopRequireDefault(require("@babel/runtime/helpers/regeneratorRuntime"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _reactBaiduMapUtils = require("@uiw/react-baidu-map-utils");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * 初始化和加载baidu地图
 */

function delay(time) {
  return new Promise(function (resolve, reject) {
    window && window.setTimeout(resolve, time);
  });
}
var DEFAULT_RETRY_TIME = 3;

/**
 * APILoader 用于加载百度地图依赖
 */
var APILoader = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2.default)(APILoader, _React$Component);
  var _super = (0, _createSuper2.default)(APILoader);
  function APILoader(props) {
    var _this;
    (0, _classCallCheck2.default)(this, APILoader);
    _this = _super.call(this, props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isMountedOk", false);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleError", function (error) {
      if (_this.isMountedOk) {
        _this.setState({
          error: error
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "finish", function () {
      if (window && _this.props.type === 'webgl') {
        window.BMap = window.BMapGL;
      }
      if (_this.isMountedOk) {
        _this.setState({
          loaded: true
        });
      }
    });
    _this.state = {
      loaded: props.type === 'webgl' ? window && !!window.BMapGL && !!window.BMapGL.Map : window && !!window.BMap && !!window.BMap.Map
    };
    if (_this.props.akay == null) {
      throw new TypeError('BaiDuMap: akay is required');
    }
    return _this;
  }
  (0, _createClass2.default)(APILoader, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.isMountedOk = true;
      var callbackName = this.props.callbackName;
      if (!window || !callbackName) {
        return;
      }
      if (this.props.type === 'webgl' && window && window.BMapGL && !window.BMapGL.Map || this.props.type === 'webgl' && window && !window.BMapGL || window && window.BMap && !window.BMap.Map || window && !window.BMap) {
        if (window && window[callbackName]) {
          APILoader.waitQueue.push([this.finish, this.handleError]);
          return;
        }
        this.loadMap();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.isMountedOk = false;
    }
  }, {
    key: "render",
    value: function render() {
      if (window && window.BMapGL && this.props.type === 'webgl') {
        window.BMap = window.BMapGL;
      }
      return this.state.loaded ? this.props.children : this.props.fallback ? this.props.fallback(this.state.error) : this.state.error ? /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        style: {
          color: 'red'
        },
        children: this.state.error.message
      }) : null;
    }
  }, {
    key: "getScriptSrc",
    value: function getScriptSrc() {
      var cfg = this.props;
      var protocol = cfg.protocol || window.location.protocol;
      if (protocol.indexOf(':') === -1) {
        protocol += ':';
      }
      var args = ["v=".concat(cfg.version), "ak=".concat(cfg.akay), "callback=".concat(cfg.callbackName)];
      if (cfg.type) {
        args.push("type=".concat(cfg.type));
      }
      return "".concat(protocol, "//").concat(cfg.hostAndPath, "?").concat(args.join('&'));
    }
    /**
     * load BaiduMap in script tag
     */
  }, {
    key: "loadMap",
    value: function () {
      var _loadMap = (0, _asyncToGenerator2.default)( /*#__PURE__*/(0, _regeneratorRuntime2.default)().mark(function _callee() {
        var _this2 = this;
        var callbackName, src, i, _ret;
        return (0, _regeneratorRuntime2.default)().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                callbackName = this.props.callbackName;
                if (!(!window || !callbackName)) {
                  _context.next = 3;
                  break;
                }
                return _context.abrupt("return");
              case 3:
                src = this.getScriptSrc();
                window[callbackName] = function () {
                  // flush queue
                  var queue = APILoader.waitQueue;
                  APILoader.waitQueue = [];
                  queue.forEach(function (task) {
                    return task[0]();
                  });
                  _this2.finish();
                };
                i = 0;
              case 6:
                if (!(i < DEFAULT_RETRY_TIME)) {
                  _context.next = 24;
                  break;
                }
                _context.prev = 7;
                _context.next = 10;
                return (0, _reactBaiduMapUtils.requireScript)(src);
              case 10:
                return _context.abrupt("break", 24);
              case 13:
                _context.prev = 13;
                _context.t0 = _context["catch"](7);
                if (!(i === DEFAULT_RETRY_TIME - 1)) {
                  _context.next = 19;
                  break;
                }
                _ret = function () {
                  var err = new Error("Failed to load Baidu Map: ".concat(_context.t0.message));
                  // flush queue
                  var queue = APILoader.waitQueue;
                  APILoader.waitQueue = [];
                  queue.forEach(function (task) {
                    return task[1](err);
                  });
                  _this2.handleError(err);
                  return {
                    v: void 0
                  };
                }();
                if (!((0, _typeof2.default)(_ret) === "object")) {
                  _context.next = 19;
                  break;
                }
                return _context.abrupt("return", _ret.v);
              case 19:
                _context.next = 21;
                return delay(i * 1000);
              case 21:
                i++;
                _context.next = 6;
                break;
              case 24:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[7, 13]]);
      }));
      function loadMap() {
        return _loadMap.apply(this, arguments);
      }
      return loadMap;
    }()
  }], [{
    key: "ready",
    value:
    /**
     * 全局可能存在多个Loader同时渲染, 但是只能由一个负责加载
     */
    /**
     * 等待BMap就绪
     */
    function () {
      var _ready = (0, _asyncToGenerator2.default)( /*#__PURE__*/(0, _regeneratorRuntime2.default)().mark(function _callee2() {
        return (0, _regeneratorRuntime2.default)().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(window && window.BMap.Map)) {
                  _context2.next = 2;
                  break;
                }
                return _context2.abrupt("return");
              case 2:
                if (!(window && window.BMapGL.Map)) {
                  _context2.next = 4;
                  break;
                }
                return _context2.abrupt("return");
              case 4:
                return _context2.abrupt("return", new Promise(function (res, rej) {
                  APILoader.waitQueue.push([res, rej]);
                }));
              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));
      function ready() {
        return _ready.apply(this, arguments);
      }
      return ready;
    }()
  }]);
  return APILoader;
}(_react.default.Component);
exports.default = APILoader;
(0, _defineProperty2.default)(APILoader, "defaultProps", {
  akay: '',
  hostAndPath: 'api.map.baidu.com/api',
  version: '2.0',
  callbackName: 'load_bmap_sdk',
  type: ''
});
(0, _defineProperty2.default)(APILoader, "waitQueue", []);
//# sourceMappingURL=index.js.map