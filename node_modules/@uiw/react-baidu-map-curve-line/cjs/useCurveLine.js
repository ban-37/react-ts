"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCurveLine = useCurveLine;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactBaiduMapMap = require("@uiw/react-baidu-map-map");
var _reactBaiduMapUtils = require("@uiw/react-baidu-map-utils");
function useCurveLine() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var strokeColor = props.strokeColor,
    strokeWeight = props.strokeWeight,
    strokeOpacity = props.strokeOpacity,
    strokeStyle = props.strokeStyle,
    enableMassClear = props.enableMassClear,
    _props$enableEditing = props.enableEditing,
    enableEditing = _props$enableEditing === void 0 ? false : _props$enableEditing,
    enableClicking = props.enableClicking,
    icons = props.icons;
  var _useMapContext = (0, _reactBaiduMapMap.useMapContext)(),
    map = _useMapContext.map;
  var _useState = (0, _react.useState)(),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    curveLine = _useState2[0],
    setCurveLine = _useState2[1];
  var libSDK = window.BMapLib;
  var _useState3 = (0, _react.useState)(libSDK),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    bMapLib = _useState4[0],
    setBMapLib = _useState4[1];
  var _useState5 = (0, _react.useState)(false || !!libSDK),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    loadMapLib = _useState6[0],
    setLoadBMapLib = _useState6[1];
  // eslint-disable-next-line react-hooks/exhaustive-deps
  var opts = {
    strokeColor: strokeColor,
    strokeWeight: strokeWeight,
    strokeOpacity: strokeOpacity,
    strokeStyle: strokeStyle,
    enableMassClear: enableMassClear,
    enableEditing: enableEditing,
    enableClicking: enableClicking,
    icons: icons
  };
  (0, _react.useMemo)(function () {
    // 如果第一次加载，会执行下面的
    if (map && bMapLib && !curveLine) {
      if (bMapLib.CurveLine) {
        var points = (props.path || []).map(function (item) {
          return new BMap.Point(item.lng, item.lat);
        });
        var instance = new BMapLib.CurveLine(points, opts);
        map.addOverlay(instance);
        setCurveLine(instance);
      }
    }

    // 如果 bMapLib 已经加载过，会执行下面的
    if (map && bMapLib && !bMapLib.CurveLine) {
      (0, _reactBaiduMapUtils.requireScript)('//api.map.baidu.com/library/CurveLine/1.5/src/CurveLine.min.js').then(function () {
        if (window.BMapLib) {
          var newMapLib = Object.assign(window.BMapLib, bMapLib);
          setBMapLib(newMapLib);
          var _points = (props.path || []).map(function (item) {
            return new BMap.Point(item.lng, item.lat);
          });
          var _instance = new BMapLib.CurveLine(_points, opts);
          map.addOverlay(_instance);
          setCurveLine(_instance);
        }
      }).catch(function () {});
    }

    // 如果第一次加载，会执行下面的
    if (!bMapLib && !loadMapLib) {
      setLoadBMapLib(true);
      (0, _reactBaiduMapUtils.requireScript)('//api.map.baidu.com/library/CurveLine/1.5/src/CurveLine.min.js').then(function () {
        if (window.BMapLib) {
          setBMapLib(window.BMapLib);
        }
      }).catch(function () {});
    }
  }, [map, bMapLib, curveLine, loadMapLib, props.path, opts]);
  var _useState7 = (0, _react.useState)(props.path || []),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    path = _useState8[0],
    setPath = _useState8[1];
  (0, _react.useEffect)(function () {
    if (curveLine && props.path && path && JSON.stringify(path) !== JSON.stringify(props.path)) {
      var points = path.map(function (item) {
        return new BMap.Point(item.lng, item.lat);
      });
      curveLine.setPath(points);
    }
  }, [curveLine, path, props.path]);
  (0, _reactBaiduMapUtils.useVisiable)(curveLine, props);
  (0, _reactBaiduMapUtils.useEventProperties)(curveLine, props, ['Click', 'DblClick', 'MouseDown', 'MouseUp', 'MouseOut', 'MouseOver', 'Remove', 'LineUpdate']);
  (0, _reactBaiduMapUtils.useEnableProperties)(curveLine, props, ['Editing', 'MassClear']);
  // PositionAt
  (0, _reactBaiduMapUtils.useProperties)(curveLine, props, ['StrokeColor', 'StrokeOpacity', 'StrokeWeight', 'StrokeStyle']);
  return {
    curveLine: curveLine,
    setCurveLine: setCurveLine,
    BMapLib: bMapLib,
    path: path,
    setPath: setPath
  };
}
//# sourceMappingURL=useCurveLine.js.map