"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCustomOverlay = useCustomOverlay;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = require("react");
var _reactDom = require("react-dom");
var _reactBaiduMapMap = require("@uiw/react-baidu-map-map");
var _reactBaiduMapUtils = require("@uiw/react-baidu-map-utils");
function getCustomOverlay() {
  return /*#__PURE__*/function (_BMap$Overlay) {
    (0, _inherits2.default)(_class2, _BMap$Overlay);
    var _super = (0, _createSuper2.default)(_class2);
    function _class2(elm, _position, paneName) {
      var _this;
      (0, _classCallCheck2.default)(this, _class2);
      _this = _super.call(this);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "container", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "map", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "paneName", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "position", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "offset", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "initialize", function (map) {
        var panes = map.getPanes();
        _this.container.style.position = 'absolute';
        _this.map = map;
        panes[_this.paneName].appendChild(_this.container);
        return _this.container;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "draw", function () {
        if (_this.position == null || _this.map == null) {
          return;
        }
        var position = _this.map.pointToOverlayPixel(_this.position);
        var _ref = _this.offset || {},
          _ref$width = _ref.width,
          width = _ref$width === void 0 ? 0 : _ref$width,
          _ref$height = _ref.height,
          height = _ref$height === void 0 ? 0 : _ref$height;
        _this.container.style.left = "".concat(position.x + width, "px");
        _this.container.style.top = "".concat(position.y + height, "px");
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setOffset", function (offset) {
        _this.offset = offset;
        _this.draw();
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setPosition", function (position) {
        _this.position = position;
        _this.draw();
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setVisiable", function (visiable) {
        _this.container.style.display = visiable ? 'block' : 'none';
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getPosition", function () {
        return _this.position;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setZIndex", function (index) {
        _this.container.style.zIndex = index.toString();
      });
      _this.container = elm;
      _this.paneName = paneName || 'markerPane';
      _this.position = _position;
      return _this;
    }
    return (0, _createClass2.default)(_class2);
  }(BMap.Overlay);
}
function useCustomOverlay() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var children = props.children,
    paneName = props.paneName,
    position = props.position;
  var _useMapContext = (0, _reactBaiduMapMap.useMapContext)(),
    map = _useMapContext.map;
  var _useState = (0, _react.useState)(),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    customOverlay = _useState2[0],
    setCustomOverlay = _useState2[1];
  var _useState3 = (0, _react.useState)(),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    div = _useState4[0],
    setDiv = _useState4[1];
  var _useState5 = (0, _react.useState)(),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    portal = _useState6[0],
    setPortal = _useState6[1];
  var _useState7 = (0, _react.useState)(0),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    count = _useState8[0],
    setCount = _useState8[1];
  (0, _react.useEffect)(function () {
    return function () {
      if (map && customOverlay) {
        map.removeOverlay(customOverlay);
      }
    };
  }, [customOverlay, map]);
  (0, _react.useMemo)(function () {
    if (map && !portal && document) {
      var elm = document.createElement('div');
      var CustomOverlay = getCustomOverlay();
      var portalInstance = /*#__PURE__*/(0, _reactDom.createPortal)(children, elm);
      var CompOverlay = new CustomOverlay(elm, position, paneName);
      setCount(count + 1);
      setDiv(elm);
      map.addOverlay(CompOverlay);
      setPortal(portalInstance);
      setCustomOverlay(CompOverlay);
    }
  }, [children, count, map, paneName, portal, position]);
  var prevCount = (0, _reactBaiduMapUtils.usePrevious)(count);
  (0, _react.useMemo)(function () {
    if (map && div && children && count === prevCount) {
      var portalInstance = /*#__PURE__*/(0, _reactDom.createPortal)(children, div);
      setPortal(portalInstance);
      setCount(count + 1);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [children, customOverlay]);
  (0, _reactBaiduMapUtils.useProperties)(customOverlay, props, ['ZIndex', 'Offset', 'Position', 'Visiable']);
  return {
    portal: portal,
    setPortal: setPortal,
    customOverlay: customOverlay,
    setCustomOverlay: setCustomOverlay
  };
}
//# sourceMappingURL=useCustomOverlay.js.map