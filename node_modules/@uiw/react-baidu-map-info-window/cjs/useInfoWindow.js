"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useInfoWindow = useInfoWindow;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = require("react");
var _reactBaiduMapMap = require("@uiw/react-baidu-map-map");
var _reactBaiduMapUtils = require("@uiw/react-baidu-map-utils");
var _excluded = ["position"];
function useInfoWindow() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var position = props.position,
    opts = (0, _objectWithoutProperties2.default)(props, _excluded);
  var _usePortal = (0, _reactBaiduMapUtils.usePortal)(),
    container = _usePortal.container,
    Portal = _usePortal.Portal;
  var _usePortal2 = (0, _reactBaiduMapUtils.usePortal)(),
    title = _usePortal2.container,
    PortalTitle = _usePortal2.Portal;
  var _useMapContext = (0, _reactBaiduMapMap.useMapContext)(),
    map = _useMapContext.map;
  var _useState = (0, _react.useState)(),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    infoWindow = _useState2[0],
    setInfoWindow = _useState2[1];
  (0, _react.useMemo)(function () {
    if (!infoWindow && map) {
      opts.title = title;
      var win = new BMap.InfoWindow(props.children ? container : opts.content || '', (0, _objectSpread2.default)({}, opts));
      setInfoWindow(win);
    }
    return function () {
      if (infoWindow) {
        infoWindow.restore();
      }
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [map]);
  var _useState3 = (0, _react.useState)(opts.isOpen === undefined ? true : opts.isOpen),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isOpen = _useState4[0],
    setIsOpen = _useState4[1];
  (0, _react.useEffect)(function () {
    if (map && BMap && infoWindow) {
      if (!isOpen) {
        map.closeInfoWindow();
      } else if (position) {
        var point = new BMap.Point(position.lng, position.lat);
        map.openInfoWindow(infoWindow, point);
      }
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isOpen, infoWindow]);
  (0, _react.useEffect)(function () {
    if (infoWindow) {
      infoWindow.setContent(props.children ? container : opts.content || '');
    }
  }, [props.content, props.children, infoWindow, container, opts.content]);
  (0, _react.useEffect)(function () {
    if (infoWindow) {
      infoWindow.setTitle(title);
    }
  }, [infoWindow, props.content, title]);
  (0, _reactBaiduMapUtils.useVisiable)(infoWindow, props);
  (0, _reactBaiduMapUtils.useEventProperties)(infoWindow, props, ['Close', 'Open', 'Maximize', 'Restore', 'ClickClose']);
  (0, _reactBaiduMapUtils.useProperties)(infoWindow, props, ['Width', 'Height',
  // 'Title',
  // 'Content',
  'MaxContent']);
  (0, _reactBaiduMapUtils.useEnableProperties)(infoWindow, props, ['CloseOnClick', 'Maximize', 'AutoPan']);
  return {
    /**
     * 信息窗口实例对象
     */
    infoWindow: infoWindow,
    /**
     * 更新 信息窗口实例对象
     */
    setInfoWindow: setInfoWindow,
    isOpen: isOpen,
    setIsOpen: setIsOpen,
    Portal: Portal,
    PortalTitle: PortalTitle
  };
}
//# sourceMappingURL=useInfoWindow.js.map