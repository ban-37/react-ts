"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMap = useMap;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactBaiduMapUtils = require("@uiw/react-baidu-map-utils");
var _context = require("./context");
function useMap() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var widget = props.widget,
    minZoom = props.minZoom,
    maxZoom = props.maxZoom,
    mapType = props.mapType,
    enableHighResolution = props.enableHighResolution,
    enableAutoResize = props.enableAutoResize,
    enableMapClick = props.enableMapClick;
  var _useState = (0, _react.useState)(),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    map = _useState2[0],
    setMap = _useState2[1];
  var _useState3 = (0, _react.useState)(props.zoom || 15),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    zoom = _useState4[0],
    setZoom = _useState4[1];
  var _useState5 = (0, _react.useState)(props.container),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    container = _useState6[0],
    setContainer = _useState6[1];
  var _useContext = (0, _react.useContext)(_context.Context),
    dispatch = _useContext.dispatch;
  (0, _react.useMemo)(function () {
    if (container && !map && BMap) {
      var instance = new BMap.Map(container, {
        minZoom: minZoom,
        maxZoom: maxZoom,
        mapType: mapType,
        enableHighResolution: enableHighResolution,
        enableAutoResize: enableAutoResize,
        enableMapClick: enableMapClick
      });
      /**
       * 加载控件
       */
      widget && widget.forEach(function (item) {
        if (!BMap) {
          return;
        }
        if (typeof item === 'string') {
          var Control = BMap[item];
          Control && instance.addControl(new Control());
        } else if ((0, _typeof2.default)(item) === 'object' && item.control && typeof item.control === 'function') {
          instance.addControl(item.control(BMap, instance));
        } else if ((0, _typeof2.default)(item) === 'object' && item.name) {
          var options = typeof item.options === 'function' ? item.options(BMap, instance) : item.options;
          var _Control = BMap[item.name];
          _Control && instance.addControl(new _Control(options));
        }
      });
      setMap(instance);
    }
    return function () {
      if (map) {
        map.clearOverlays();
      }
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [container, map]);
  (0, _react.useEffect)(function () {
    if (map && container) {
      dispatch({
        map: map,
        container: container,
        BMap: BMap
      });
    }
    return function () {
      dispatch({
        map: undefined,
        container: undefined,
        BMap: undefined
      });
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [map, container]);
  var _useState7 = (0, _react.useState)(props.center || '上海'),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    center = _useState8[0],
    setCenter = _useState8[1];
  /**
   * 根据参数设置中心点
   */
  (0, _react.useEffect)(function () {
    if (map && center) {
      var cent = center;
      if (center && center.lng && center.lat) {
        cent = new BMap.Point(center.lng, center.lat);
        map.centerAndZoom(cent, zoom);
      }
      map.centerAndZoom(center, zoom);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [center, map]);
  var _useState9 = (0, _react.useState)(props.autoLocalCity),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    autoLocalCity = _useState10[0],
    setAutoLocalCity = _useState10[1];
  /**
   * IP定位获取当前城市，进行自动定位
   */
  (0, _react.useEffect)(function () {
    if (map && autoLocalCity) {
      var myCity = new BMap.LocalCity();
      myCity.get(function (result) {
        setCenter(result.name);
        setZoom(result.level);
        setAutoLocalCity(false);
      });
    }
  }, [autoLocalCity, map]);
  (0, _reactBaiduMapUtils.useEventProperties)(map, props, ['Click', 'DblClick', 'RightClick', 'RightdblClick', 'MapTypeChange', 'MouseMove', 'MouseOver', 'MouseOut', 'MoveStart', 'Moving', 'MoveEnd', 'ZoomStart', 'ZoomEnd', 'AddOverlay', 'AddControl', 'RemoveControl', 'RemoveOverlay', 'ClearOverlays', 'DragStart', 'Dragging', 'DragEnd', 'AddTileLayer', 'RemoveTileLayer', 'Load', 'ReSize', 'HotspotClick', 'HotspotOver', 'HotspotOut', 'TilesLoaded', 'TouchStart', 'TouchMove', 'TouchEnd', 'LongPress']);
  // 'Center',
  (0, _reactBaiduMapUtils.useProperties)(map, props, ['DefaultCursor', 'DraggingCursor', 'MinZoom', 'MaxZoom', 'MapStyle', 'MapStyleV2', 'Panorama', 'CurrentCity', 'MapType', 'Viewport', 'Zoom']);
  (0, _reactBaiduMapUtils.useEnableProperties)(map, props, ['Dragging', 'ScrollWheelZoom', 'DoubleClickZoom', 'Keyboard', 'InertialDragging', 'ContinuousZoom', 'PinchToZoom', 'AutoResize']);
  return {
    map: map,
    setMap: setMap,
    zoom: zoom,
    setZoom: setZoom,
    container: container,
    setContainer: setContainer,
    center: center,
    setCenter: setCenter,
    autoLocalCity: autoLocalCity,
    setAutoLocalCity: setAutoLocalCity
  };
}
//# sourceMappingURL=useMap.js.map