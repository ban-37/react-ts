"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMarker = useMarker;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _reactBaiduMapMap = require("@uiw/react-baidu-map-map");
var _react = require("react");
var _reactBaiduMapUtils = require("@uiw/react-baidu-map-utils");
var _markers = require("./markers");
// import defaultIconUrl from './markers.png';

var getIcons = function getIcons(name) {
  var icons = {
    simple_red: new BMap.Icon(_markers.defaultIconUrl, new BMap.Size(42 / 2, 66 / 2), {
      imageOffset: new BMap.Size(-454 / 2, -378 / 2),
      anchor: new BMap.Size(42 / 2 / 2, 66 / 2)
    }),
    simple_blue: new BMap.Icon(_markers.defaultIconUrl, new BMap.Size(42 / 2, 66 / 2), {
      imageOffset: new BMap.Size(-454 / 2, -450 / 2),
      anchor: new BMap.Size(42 / 2 / 2, 66 / 2)
    }),
    loc_red: new BMap.Icon(_markers.defaultIconUrl, new BMap.Size(46 / 2, 70 / 2), {
      imageOffset: new BMap.Size(-400 / 2, -378 / 2),
      anchor: new BMap.Size(46 / 2 / 2, 70 / 2)
    }),
    loc_blue: new BMap.Icon(_markers.defaultIconUrl, new BMap.Size(46 / 2, 70 / 2), {
      imageOffset: new BMap.Size(-400 / 2, -450 / 2),
      anchor: new BMap.Size(46 / 2 / 2, 70 / 2)
    }),
    dot_red: new BMap.Icon(_markers.defaultIconUrl, new BMap.Size(16 / 2, 16 / 2), {
      imageOffset: new BMap.Size(-216 / 2, -466 / 2),
      anchor: new BMap.Size(16 / 2 / 2, 16 / 2)
    }),
    dot_blue: new BMap.Icon(_markers.defaultIconUrl, new BMap.Size(16 / 2, 16 / 2), {
      imageOffset: new BMap.Size(-216 / 2, -486 / 2),
      anchor: new BMap.Size(16 / 2 / 2, 16 / 2)
    }),
    start: new BMap.Icon(_markers.defaultIconUrl, new BMap.Size(50 / 2, 80 / 2), {
      imageOffset: new BMap.Size(-400 / 2, -278 / 2),
      anchor: new BMap.Size(50 / 2 / 2, 80 / 2)
    }),
    end: new BMap.Icon(_markers.defaultIconUrl, new BMap.Size(50 / 2, 80 / 2), {
      imageOffset: new BMap.Size(-450 / 2, -278 / 2),
      anchor: new BMap.Size(50 / 2 / 2, 80 / 2)
    }),
    location: new BMap.Icon(_markers.defaultIconUrl, new BMap.Size(28 / 2, 40 / 2), {
      imageOffset: new BMap.Size(-248 / 2, -466 / 2),
      anchor: new BMap.Size(28 / 2 / 2, 40 / 2)
    })
  };
  for (var i = 1; i <= 10; i++) {
    icons['red' + i] = new BMap.Icon(_markers.defaultIconUrl, new BMap.Size(42 / 2, 66 / 2), {
      imageOffset: new BMap.Size(0 - 42 / 2 * (i - 1), 0),
      anchor: new BMap.Size(42 / 2 / 2, 66 / 2)
    });
  }
  for (var _i = 1; _i <= 10; _i++) {
    icons['blue' + _i] = new BMap.Icon(_markers.defaultIconUrl, new BMap.Size(42 / 2, 66 / 2), {
      imageOffset: new BMap.Size(0 - 42 / 2 * (_i - 1), -132 / 2),
      anchor: new BMap.Size(42 / 2 / 2, 66 / 2)
    });
  }
  return icons[name];
};
function useMarker() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var position = props.position,
    animation = props.animation,
    offset = props.offset,
    icon = props.icon,
    enableMassClear = props.enableMassClear,
    enableDragging = props.enableDragging,
    enableClicking = props.enableClicking,
    raiseOnDrag = props.raiseOnDrag,
    draggingCursor = props.draggingCursor,
    rotation = props.rotation,
    shadow = props.shadow,
    title = props.title;
  var _useMapContext = (0, _reactBaiduMapMap.useMapContext)(),
    map = _useMapContext.map;
  var _useState = (0, _react.useState)(),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    marker = _useState2[0],
    setMarker = _useState2[1];
  (0, _react.useEffect)(function () {
    if (!BMap || !map) return _reactBaiduMapUtils.noop;
    var options = {
      offset: offset,
      icon: icon,
      enableMassClear: enableMassClear,
      enableDragging: enableDragging,
      enableClicking: enableClicking,
      raiseOnDrag: raiseOnDrag,
      draggingCursor: draggingCursor,
      rotation: rotation,
      shadow: shadow,
      title: title
    };
    var point = new BMap.Point(position.lng, position.lat);
    var newMarker = new BMap.Marker(point, options);
    map.addOverlay(newMarker);
    newMarker.setAnimation(animation);
    setMarker(newMarker);
    return function () {
      map.removeOverlay(newMarker);
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [map]);
  var _useState3 = (0, _react.useState)(props.type || 'loc_blue'),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    type = _useState4[0],
    setType = _useState4[1];
  /**
   * 设置标注点 `图标`
   */
  (0, _react.useEffect)(function () {
    if (map && marker && !icon && type) {
      var newIcon = getIcons(type);
      console.log('>>>>newIcon>>>', newIcon);
      newIcon.setImageSize(new BMap.Size(600 / 2, 600 / 2));
      marker.setIcon(newIcon);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [type, marker]);
  (0, _reactBaiduMapUtils.useVisiable)(marker, props);
  (0, _reactBaiduMapUtils.useEventProperties)(marker, props, ['Click', 'DblClick', 'MouseDown', 'MouseUp', 'MouseOut', 'MouseOver', 'Remove', 'InfowindowClose', 'InfowindowOpen', 'DragStart', 'Dragging', 'DragEnd', 'RightClick']);
  (0, _reactBaiduMapUtils.useEnableProperties)(marker, props, ['Dragging', 'MassClear', 'Clicking']);
  (0, _reactBaiduMapUtils.useProperties)(marker, props, ['Icon', 'Position', 'Animation', 'Offset', 'Label', 'Title', 'Top', 'ZIndex', 'Rotation', 'Shadow']);
  return {
    marker: marker,
    setMarker: setMarker,
    type: type,
    setType: setType
  };
}
//# sourceMappingURL=useMarker.js.map