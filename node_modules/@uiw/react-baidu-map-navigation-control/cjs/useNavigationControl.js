"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useNavigationControl = useNavigationControl;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactBaiduMapMap = require("@uiw/react-baidu-map-map");
var _reactBaiduMapUtils = require("@uiw/react-baidu-map-utils");
function useNavigationControl() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _useState = (0, _react.useState)(),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    navigationControl = _useState2[0],
    setNavigationControl = _useState2[1];
  var anchor = props.anchor,
    offset = props.offset,
    type = props.type,
    showZoomInfo = props.showZoomInfo,
    enableGeolocation = props.enableGeolocation;
  var _useMapContext = (0, _reactBaiduMapMap.useMapContext)(),
    map = _useMapContext.map;
  (0, _react.useEffect)(function () {
    if (!map || navigationControl) return;
    var instance = new BMap.NavigationControl({
      anchor: anchor || BMAP_ANCHOR_TOP_LEFT,
      offset: offset,
      type: type,
      showZoomInfo: showZoomInfo,
      enableGeolocation: enableGeolocation
    });
    map.addControl(instance);
    setNavigationControl(instance);
    return function () {
      if (map && instance) {
        map.removeControl(instance);
      }
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [map]);
  (0, _reactBaiduMapUtils.useVisiable)(navigationControl, props);
  (0, _reactBaiduMapUtils.useProperties)(navigationControl, props, ['Anchor', 'Offset', 'Type']);
  return {
    navigationControl: navigationControl,
    setNavigationControl: setNavigationControl
  };
}
//# sourceMappingURL=useNavigationControl.js.map