"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useOverviewMapControl = useOverviewMapControl;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactBaiduMapMap = require("@uiw/react-baidu-map-map");
var _reactBaiduMapUtils = require("@uiw/react-baidu-map-utils");
function useOverviewMapControl() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _useState = (0, _react.useState)(),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    overviewMapControl = _useState2[0],
    setOverviewMapControl = _useState2[1];
  var anchor = props.anchor,
    offset = props.offset,
    size = props.size,
    isOpen = props.isOpen;
  var _useMapContext = (0, _reactBaiduMapMap.useMapContext)(),
    map = _useMapContext.map;
  (0, _react.useEffect)(function () {
    if (map && !overviewMapControl) {
      var instance = new BMap.OverviewMapControl({
        anchor: anchor || BMAP_ANCHOR_TOP_LEFT,
        offset: offset,
        size: size,
        isOpen: isOpen
      });
      map.addControl(instance);
      setOverviewMapControl(instance);
      return function () {
        map.removeControl(instance);
      };
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [map]);
  (0, _reactBaiduMapUtils.useVisiable)(overviewMapControl, props);
  (0, _reactBaiduMapUtils.useEventProperties)(overviewMapControl, props, ['ViewChanged', 'ViewChanging']);
  (0, _reactBaiduMapUtils.useProperties)(overviewMapControl, props, ['Anchor', 'Offset', 'Size']);
  return {
    overviewMapControl: overviewMapControl,
    setOverviewMapControl: setOverviewMapControl
  };
}
//# sourceMappingURL=useOverviewMapControl.js.map