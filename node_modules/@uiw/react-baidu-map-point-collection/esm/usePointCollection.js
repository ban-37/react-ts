import { useState, useEffect } from 'react';
import { useMapContext } from '@uiw/react-baidu-map-map';
import { useProperties, useVisiable, useEventProperties } from '@uiw/react-baidu-map-utils';
var EVENTS = ['onClick', 'onMouseOver', 'onMouseOut'];
export function usePointCollection(props) {
  if (props === void 0) {
    props = {};
  }
  var {
    shape,
    color,
    size
  } = props;
  var {
    map
  } = useMapContext();
  var [points, setPoints] = useState(props.points);
  var [pointCollection, setPointCollection] = useState();
  var getPoints = function getPoints(data) {
    if (data === void 0) {
      data = [];
    }
    var result = [];
    data.forEach(item => {
      result.push(new BMap.Point(item[0], item[1]));
    });
    return result;
  };
  useEffect(() => {
    if (!BMap || !map) return;
    // 判断当前浏览器是否支持绘制海量点
    if (document && !document.createElement('canvas').getContext) return;
    var opts = {
      shape,
      color,
      size
    };
    if (!pointCollection) {
      if (!opts.size) opts.size = BMAP_POINT_SIZE_SMALL;
      if (!opts.shape) opts.shape = BMAP_POINT_SHAPE_WATERDROP;
      if (!opts.color) opts.color = '#d340c3';
      var _pointCollection = new BMap.PointCollection(getPoints(points), opts);
      // pointCollection.clear();
      map.addOverlay(_pointCollection);
      setPointCollection(_pointCollection);
      EVENTS.forEach(evnetName => {
        if (props[evnetName]) {
          var name = evnetName.replace(/^on/, '').toLowerCase();
          _pointCollection.addEventListener(name, props[evnetName]);
        }
      });
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [map]);
  useEffect(() => {
    if (pointCollection && points) {
      // pointCollection.clear();
      pointCollection.setPoints(getPoints(points));
    }
  }, [points, pointCollection]);
  useVisiable(pointCollection, props);
  useEventProperties(pointCollection, props, ['onClick', 'onMouseOver', 'onMouseOut']);
  useProperties(pointCollection, props, ['Styles']);
  return {
    pointCollection,
    setPointCollection,
    points,
    setPoints
  };
}
//# sourceMappingURL=usePointCollection.js.map