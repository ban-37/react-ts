"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePolyline = usePolyline;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactBaiduMapMap = require("@uiw/react-baidu-map-map");
var _reactBaiduMapUtils = require("@uiw/react-baidu-map-utils");
function usePolyline() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var strokeColor = props.strokeColor,
    strokeWeight = props.strokeWeight,
    strokeOpacity = props.strokeOpacity,
    strokeStyle = props.strokeStyle,
    enableMassClear = props.enableMassClear,
    enableEditing = props.enableEditing,
    enableClicking = props.enableClicking,
    icons = props.icons;
  var _useMapContext = (0, _reactBaiduMapMap.useMapContext)(),
    map = _useMapContext.map;
  var _useState = (0, _react.useState)(),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    polyline = _useState2[0],
    setPolyline = _useState2[1];
  var _useState3 = (0, _react.useState)(props.path || []),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    path = _useState4[0],
    setPath = _useState4[1];

  // eslint-disable-next-line react-hooks/exhaustive-deps
  var opts = {
    strokeColor: strokeColor,
    strokeWeight: strokeWeight,
    strokeOpacity: strokeOpacity,
    strokeStyle: strokeStyle,
    enableMassClear: enableMassClear,
    enableEditing: enableEditing,
    enableClicking: enableClicking,
    icons: icons
  };
  (0, _react.useEffect)(function () {
    return function () {
      if (polyline && map) {
        map.removeOverlay(polyline);
      }
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [map]);
  (0, _react.useMemo)(function () {
    if (map && !polyline) {
      var points = (props.path || []).map(function (item) {
        return new BMap.Point(item.lng, item.lat);
      });
      var instance = new BMap.Polyline(points, opts);
      map.addOverlay(instance);
      setPolyline(instance);
    }
  }, [map, opts, polyline, props.path]);
  (0, _react.useEffect)(function () {
    if (path && polyline) {
      var points = path.map(function (item) {
        return new BMap.Point(item.lng, item.lat);
      });
      polyline.setPath(points);
    }
  }, [polyline, path]);
  (0, _reactBaiduMapUtils.useVisiable)(polyline, props);
  (0, _reactBaiduMapUtils.useEventProperties)(polyline, props, ['Click', 'DblClick', 'MouseDown', 'MouseUp', 'MouseOut', 'MouseOver', 'Remove', 'LineUpdate']);
  (0, _reactBaiduMapUtils.useEnableProperties)(polyline, props, ['Editing', 'MassClear']);
  // PositionAt
  (0, _reactBaiduMapUtils.useProperties)(polyline, props, ['StrokeColor', 'StrokeOpacity', 'StrokeWeight', 'StrokeStyle']);
  return {
    polyline: polyline,
    setPolyline: setPolyline,
    path: path,
    setPath: setPath
  };
}
//# sourceMappingURL=usePolyline.js.map